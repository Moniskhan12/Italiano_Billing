name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Lint • Types • Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        ports: [ "5432:5432" ]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: italiano
        options: >-
          --health-cmd="pg_isready -U postgres -d italiano"
          --health-interval=5s --health-timeout=5s --health-retries=30

    env:
      DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/italiano

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install deps (CI)
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt

      - name: Ruff
        run: ruff check .

      - name: Mypy
        run: mypy app

      - name: Wait for Postgres
        run: |
          python - <<'PY'
          import time, sys; import psycopg
          for _ in range(60):
              try:
                  with psycopg.connect("host=localhost port=5432 dbname=italiano user=postgres password=postgres", connect_timeout=2): sys.exit(0)
              except Exception: time.sleep(2)
          sys.exit("DB did not start")
          PY

      - name: Alembic upgrade
        run: alembic upgrade head

      - name: Pytest
        run: pytest -q --cov=app --cov-report=xml --maxfail=1

      - name: Upload coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  docker:
    name: Build & Publish (tags only)
    runs-on: ubuntu-latest
    needs: quality
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Extract tag
        id: meta
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Prepare image name (lowercase)
        id: img
        run: echo "name=ghcr.io/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')/italiano-billing" >> $GITHUB_OUTPUT
      - name: Build
        run: docker build -t ${{ steps.img.outputs.name }}:${{ steps.meta.outputs.tag }} .
      - name: Push
        run: docker push ${{ steps.img.outputs.name }}:${{ steps.meta.outputs.tag }}
